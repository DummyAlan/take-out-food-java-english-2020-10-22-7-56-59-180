import java.util.*;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
    private ItemRepository itemRepository;
    private SalesPromotionRepository salesPromotionRepository;

    public App(ItemRepository itemRepository, SalesPromotionRepository salesPromotionRepository) {
        this.itemRepository = itemRepository;
        this.salesPromotionRepository = salesPromotionRepository;
    }

    public String bestCharge(List<String> inputs) {
        //TODO: write code here
        List<Item> items = this.itemRepository.findAll();
        List<SalesPromotion> salesPromotion = this.salesPromotionRepository.findAll();

        List<String> relatedDishes = new ArrayList<>();
        for (SalesPromotion promotion : salesPromotion){
            if(!promotion.getRelatedItems().isEmpty()){
                relatedDishes = promotion.getRelatedItems();
            }
        }

        List<String> itemKeys = new ArrayList<>();
        Map<String, Integer> itemTotals = new HashMap<>();

        Map<String, Integer> itemMap = new HashMap<>();
        inputs.forEach(item -> {
            String[] splitItem = item.split(" x ");
            itemMap.put(splitItem[0], Integer.parseInt(splitItem[1]));
            itemKeys.add(splitItem[0]);
        });


        String resultStr = "============= Order details =============\n";
        for (String key : itemKeys){
            Item itemMatched = items.stream().filter(item -> item.getId().equals(key)).findFirst().get();
            int itemTotal = (int) (itemMap.get(key) * itemMatched.getPrice());
            itemTotals.put(key, itemTotal);
            String itemStr = itemMatched.getName() + " x " + itemMap.get(key).toString() + " = " + itemTotal + " yuan\n";
            resultStr += itemStr;
        }
        resultStr += "-----------------------------------\n";

        int orderTotal = itemTotals.values().stream().reduce(0, (subtotal, element) -> subtotal + element);
        int minOrderTotal = orderTotal;
        String promotionType = "";
        String promotionStr = "";
        if (orderTotal > 30){
            minOrderTotal = orderTotal - 6;
            promotionType = "BUY_30_SAVE_6_YUAN";
            promotionStr = "Reach 30 minus 6 yuan，saving 6 yuan\n";
        }

        int tempOrderTotal = orderTotal;
        for (String dishesKey: itemKeys){
            if (relatedDishes.contains(dishesKey)){
                tempOrderTotal -= itemTotals.get(dishesKey)/2;
            }
        }
        if (tempOrderTotal < minOrderTotal){
            promotionStr = "Half price for certain dishes (Braised chicken，Cold noodles)，saving "+ (orderTotal - tempOrderTotal)+" yuan\n";
            minOrderTotal = tempOrderTotal;
        }


        if (promotionType != ""){
            resultStr += "Promotion used:\n" + promotionStr + "-----------------------------------\n" ;
        }

        resultStr += "Total: " + minOrderTotal + " yuan\n";

        resultStr += "===================================";

        return resultStr;
    }

}
